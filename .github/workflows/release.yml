name: Release to PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: Test package build
        run: |
          python -m build
          twine check dist/*

      - name: Test core functionality
        run: |
          echo "🧪 Testing core functionality..."
          python -c "
          import rds_viewer, ui, fetch, metrics, pricing, reserved_instances
          print('✅ All imports successful')
          from fetch import validate_aws_credentials
          print('✅ Core functions accessible')
          print('✅ Package validation complete')
          "

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version if manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update version in pyproject.toml
          VERSION="${{ inputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to $VERSION"

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha')

    environment:
      name: testpypi
      url: https://test.pypi.org/p/smart-rds-viewer

    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Test install from TestPyPI
        run: |
          sleep 30  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ smart-rds-viewer
          smart-rds-viewer --help

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')

    environment:
      name: pypi
      url: https://pypi.org/p/smart-rds-viewer

    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-github-release:
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Smart RDS Viewer v${{ steps.version.outputs.version }}
          files: dist/*
          body: |
            ## Smart RDS Viewer v${{ steps.version.outputs.version }}

            ### 🚀 Installation

            ```bash
            pip install smart-rds-viewer
            ```

            ### 🎯 Usage

            ```bash
            # Run the viewer
            smart-rds-viewer

            # Alternative command
            rds-viewer

            # Force fresh data (bypass cache)
            smart-rds-viewer --nocache
            ```

            ### 📦 Package Distribution Files

            This release includes both wheel and source distributions for maximum compatibility.

            ### 🔗 PyPI Package

            Available on PyPI: https://pypi.org/project/smart-rds-viewer/${{ steps.version.outputs.version }}/

            ### 🛠️ Requirements

            - Python 3.8+
            - AWS credentials configured
            - Required AWS permissions for RDS, CloudWatch, and Pricing APIs

            ### 📚 Documentation

            See the [README](https://github.com/${{ github.repository }}#readme) for complete setup and usage instructions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
